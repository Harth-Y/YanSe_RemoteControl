
                    Nyquest Technology Co., Ltd.

NYASM 2.50

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ISO C Compiler 
                                    1-    3     ; Version 4.2.2 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8A054E,c=on
                                    1-    9     	#include "ny8a054e.inc"
                                    2-    1     #include "common.inc"
                                    3-    1     ;; header file for 8 bit series assembly -*- mode:asm; coding:utf-8; -*-
                                    3-    2     ;; author    Ting
                                    3-    3     ;; date      2020-12-24
                                    3-    4     ;;
                                    3-    5     ;; # constant definition
                                    3-    6     ;;
                                    3-    7     ;; ## instruction result store destination
                                    3-    8     ;;  - W: the result is stored in the ACC.
                                    3-    9     ;;  - F: the result is stored back in register.
                                    3-   10     ;; ## flag name in STATUS register
                                    3-   11     ;;  - C, DC, Z
                                    3-   12     ;;
                                    3-   13     ;; # macro define
                                    3-   14     ;;
                                    3-   15     ;; ## RETURN, used by C compiler, end of function
                                    3-   16     ;; ## PAGESEL, empty macro, maybe used by C compiler (bug?)
                                    3-   17     ;; ## BANKSEL, replace by .banksel pseudo command, empty if disable bank.
                                    3-   18     ;; ## MGOTO, replace by LGOTO (ic<=2K word) or FGOTO (ic>2K word)
                                    3-   19     ;; ## MCALL, same as above
                                    3-   20     ;;
                                    3-   21     W       EQU 0
                                    3-   21     ;W = 0
                                    3-   22     F       EQU 1
                                    3-   22     ;F = 1
                                    3-   23     C		EQU	0
                                    3-   23     ;C = 0
                                    3-   24     DC		EQU	1
                                    3-   24     ;DC = 1
                                    3-   25     Z		EQU	2
                                    3-   25     ;Z = 2
                                    3-   28     ;; common register for all series
                                    3-   29     INDF    EQU 0x00
                                    3-   29     ;INDF = 0
                                    3-   30     PCL     EQU 0x02
                                    3-   30     ;PCL = 2
                                    3-   31     STATUS  EQU 0x03
                                    3-   31     ;STATUS = 3
                                    3-   32     FSR     EQU 0x04
                                    3-   32     ;FSR = 4
                                    3-   33     PCHBUF  EQU 0x0A
                                    3-   33     ;PCHBUF = 10
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	_get_rolling_code_3
                                    1-   15     	extern	_get_rolling_code_2
                                    1-   16     	extern	_get_rolling_code_1
                                    1-   17     	extern	_get_rolling_code_0
                                    1-   18     	extern	_send_ble_packet
                                    1-   19     	extern	_Check_Keydown
                                    1-   20     	extern	_set_PB_low
                                    1-   21     	extern	_set_PA_low
                                    1-   22     	extern	_key_init
                                    1-   23     	extern	_delay_40us
                                    1-   24     	extern	_delay_us
                                    1-   25     	extern	_delay_250ms
                                    1-   26     	extern	_delay_ms
                                    1-   27     	extern	_CS1630_Dump_RF_Register
                                    1-   28     	extern	_Enter_sleep
                                    1-   29     	extern	_CS1630_SendPack
                                    1-   30     	extern	_CS1630_wr_buffer
                                    1-   31     	extern	_CS1630_write_byte
                                    1-   32     	extern	_CS1630_read_byte
                                    1-   33     	extern	_CS1630_read_buffer
                                    1-   34     	extern	_CS1630_Bank_Switch
                                    1-   35     	extern	_CS1630_ModeSwitch
                                    1-   36     	extern	_CS1630_CE_Low
                                    1-   37     	extern	_CS1630_CE_High
                                    1-   38     	extern	_CS1630_Flush_Tx
                                    1-   39     	extern	_CS1630_Clear_All_Irq
                                    1-   40     	extern	_CS1630_Init
                                    1-   41     	extern	_CS1630_Soft_Rst
                                    1-   42     	extern	_SPI_ReadByte
                                    1-   43     	extern	_SPI_SendByte
                                    1-   44     	extern	_RF_softSPI_Init
                                    1-   45     	extern	_RF_Init
                                    1-   46     	extern	_RF_wr_cmd
                                    1-   47     	extern	_RF_write_byte
                                    1-   48     	extern	_RF_wr_buffer
                                    1-   49     	extern	_RF_Write_Ack_Payload
                                    1-   50     	extern	_RF_spi_wrd
                                    1-   51     	extern	_RF_Soft_Rst
                                    1-   52     	extern	_RF_SendPack
                                    1-   53     	extern	_RF_ReceivePack
                                    1-   54     	extern	_RF_Read_Status
                                    1-   55     	extern	_RF_read_byte
                                    1-   56     	extern	_RF_read_buffer
                                    1-   57     	extern	_RF_Operation
                                    1-   58     	extern	_RF_ModeSwitch
                                    1-   59     	extern	_RF_Get_RSSI
                                    1-   60     	extern	_RF_Get_Chip_ID
                                    1-   61     	extern	_RF_Flush_Tx
                                    1-   62     	extern	_RF_Flush_Rx
                                    1-   63     	extern	_RF_Configure_Reg
                                    1-   64     	extern	_RF_Clear_All_Irq
                                    1-   65     	extern	_RF_Change_Pwr
                                    1-   66     	extern	_RF_Change_CH
                                    1-   67     	extern	_RF_ChangeAddr_Reg
                                    1-   68     	extern	_RF_CE_Low
                                    1-   69     	extern	_RF_CE_High_Pulse
                                    1-   70     	extern	_RF_CE_High
                                    1-   71     	extern	_RF_Bank_Switch
                                    1-   72     	extern	_clear_ram
                                    1-   73     	extern	_multi_16b
                                    1-   74     	extern	_multi_8b
                                    1-   75     	extern	_T0MD
                                    1-   76     	extern	_PCON1
                                    1-   77     	extern	_CMPCR
                                    1-   78     	extern	_BODCON
                                    1-   79     	extern	_PS0CV
                                    1-   80     	extern	_APHCON
                                    1-   81     	extern	_IOSTB
                                    1-   82     	extern	_IOSTA
                                    1-   83     	extern	_PWM5RH
                                    1-   84     	extern	_PWM5DUTY
                                    1-   85     	extern	_P5CR1
                                    1-   86     	extern	_PWM4DUTY
                                    1-   87     	extern	_P4CR1
                                    1-   88     	extern	_PS3CV
                                    1-   89     	extern	_PWM3DUTY
                                    1-   90     	extern	_T3CR2
                                    1-   91     	extern	_T3CR1
                                    1-   92     	extern	_TMR3
                                    1-   93     	extern	_OSCCR
                                    1-   94     	extern	_PWM2DUTY
                                    1-   95     	extern	_P2CR1
                                    1-   96     	extern	_TBHD
                                    1-   97     	extern	_TBHP
                                    1-   98     	extern	_IRCR
                                    1-   99     	extern	_BZ1CR
                                    1-  100     	extern	_PS1CV
                                    1-  101     	extern	_PWM1DUTY
                                    1-  102     	extern	_T1CR2
                                    1-  103     	extern	_T1CR1
                                    1-  104     	extern	_TMR1
                                    1-  105     	extern	_TM34RH
                                    1-  106     	extern	_TMRH
                                    1-  107     	extern	_PCHBUF
                                    1-  108     	extern	_STATUS
                                    1-  109     	extern	_PCL
                                    1-  110     	extern	_TMR0
                                    1-  111     	extern	_one_key_twice_dowm
                                    1-  112     	extern	_key_status_change
                                    1-  113     	extern	_SLEEP_STATUS
                                    1-  114     	extern	_INTE2bits
                                    1-  115     	extern	_RFCbits
                                    1-  116     	extern	_INTEDGbits
                                    1-  117     	extern	_AWUCONbits
                                    1-  118     	extern	_INTFbits
                                    1-  119     	extern	_INTEbits
                                    1-  120     	extern	_BPHCONbits
                                    1-  121     	extern	_ABPLCONbits
                                    1-  122     	extern	_BWUCONbits
                                    1-  123     	extern	_PCONbits
                                    1-  124     	extern	_PORTBbits
                                    1-  125     	extern	_PORTAbits
                                    1-  126     	extern	__nyc_ny8_startup
                                    1-  127     ;--------------------------------------------------------
                                    1-  128     ; global declarations
                                    1-  129     ;--------------------------------------------------------
                                    1-  130     	extern	_main
                                    1-  131     	extern	_CS1630_init_main
                                    1-  132     	extern	_close_WDT
                                    1-  133     	extern	_open_WDT
                                    1-  134     	extern	_wake_up_init
                                    1-  135     	extern	_isr
                                    1-  136     	extern	_INTE2
                                    1-  137     	extern	_RFC
                                    1-  138     	extern	_INTEDG
                                    1-  139     	extern	_AWUCON
                                    1-  140     	extern	_INTF
                                    1-  141     	extern	_INTE
                                    1-  142     	extern	_BPHCON
                                    1-  143     	extern	_ABPLCON
                                    1-  144     	extern	_BWUCON
                                    1-  145     	extern	_PCON
                                    1-  146     	extern	_PORTB
                                    1-  147     	extern	_PORTA
                                    1-  148     	extern	_Serial_Number
                                    1-  149     	extern	_old_key_value
                                    1-  150     	extern	_sleep_time_count_2
                                    1-  151     	extern	_slepp_time_count_1
                                    1-  153     	extern PSAVE
                                    1-  154     	extern SSAVE
                                    1-  155     	extern WSAVE
                                    1-  156     	extern STK12
                                    1-  157     	extern ___STK12
                                    1-  158     	extern STK11
                                    1-  159     	extern ___STK11
                                    1-  160     	extern STK10
                                    1-  161     	extern ___STK10
                                    1-  162     	extern STK09
                                    1-  163     	extern ___STK09
                                    1-  164     	extern STK08
                                    1-  165     	extern ___STK08
                                    1-  166     	extern STK07
                                    1-  167     	extern ___STK07
                                    1-  168     	extern STK06
                                    1-  169     	extern ___STK06
                                    1-  170     	extern STK05
                                    1-  171     	extern ___STK05
                                    1-  172     	extern STK04
                                    1-  173     	extern ___STK04
                                    1-  174     	extern STK03
                                    1-  175     	extern ___STK03
                                    1-  176     	extern STK02
                                    1-  177     	extern ___STK02
                                    1-  178     	extern STK01
                                    1-  179     	extern ___STK01
                                    1-  180     	extern STK00
                                    1-  181     	extern ___STK00
                                    1-  183     .segment "share_bank"
     0000                           1-  184     PSAVE:
                                    1-  185     	.res 1
                                    1-  186     .segment "share_bank"
     0000                           1-  187     SSAVE:
                                    1-  188     	.res 1
                                    1-  189     .segment "share_bank"
     0000                           1-  190     WSAVE:
                                    1-  191     	.res 1
                                    1-  192     .segment "share_bank"
     0000                           1-  193     ___STK12:
     0000                           1-  194     STK12:
                                    1-  195     	.res 1
                                    1-  196     .segment "share_bank"
     0000                           1-  197     ___STK11:
     0000                           1-  198     STK11:
                                    1-  199     	.res 1
                                    1-  200     .segment "share_bank"
     0000                           1-  201     ___STK10:
     0000                           1-  202     STK10:
                                    1-  203     	.res 1
                                    1-  204     .segment "share_bank"
     0000                           1-  205     ___STK09:
     0000                           1-  206     STK09:
                                    1-  207     	.res 1
                                    1-  208     .segment "share_bank"
     0000                           1-  209     ___STK08:
     0000                           1-  210     STK08:
                                    1-  211     	.res 1
                                    1-  212     .segment "share_bank"
     0000                           1-  213     ___STK07:
     0000                           1-  214     STK07:
                                    1-  215     	.res 1
                                    1-  216     .segment "share_bank"
     0000                           1-  217     ___STK06:
     0000                           1-  218     STK06:
                                    1-  219     	.res 1
                                    1-  220     .segment "share_bank"
     0000                           1-  221     ___STK05:
     0000                           1-  222     STK05:
                                    1-  223     	.res 1
                                    1-  224     .segment "share_bank"
     0000                           1-  225     ___STK04:
     0000                           1-  226     STK04:
                                    1-  227     	.res 1
                                    1-  228     .segment "share_bank"
     0000                           1-  229     ___STK03:
     0000                           1-  230     STK03:
                                    1-  231     	.res 1
                                    1-  232     .segment "share_bank"
     0000                           1-  233     ___STK02:
     0000                           1-  234     STK02:
                                    1-  235     	.res 1
                                    1-  236     .segment "share_bank"
     0000                           1-  237     ___STK01:
     0000                           1-  238     STK01:
                                    1-  239     	.res 1
                                    1-  240     .segment "share_bank"
     0000                           1-  241     ___STK00:
     0000                           1-  242     STK00:
                                    1-  243     	.res 1
                                    1-  245     ;--------------------------------------------------------
                                    1-  246     ; global definitions
                                    1-  247     ;--------------------------------------------------------
                                    1-  248     ;--------------------------------------------------------
                                    1-  249     ; absolute symbol definitions
                                    1-  250     ;--------------------------------------------------------
                                    1-  251     ;--------------------------------------------------------
                                    1-  252     ; compiler-defined variables
                                    1-  253     ;--------------------------------------------------------
                                    1-  254     .segment "uninit"
     0000                           1-  255     r0x1009:
                                    1-  256     	.res	1
                                    1-  257     .segment "uninit"
     0000                           1-  258     r0x100A:
                                    1-  259     	.res	1
                                    1-  260     .segment "uninit"
     0000                           1-  261     r0x100B:
                                    1-  262     	.res	1
                                    1-  263     .segment "uninit"
     0000                           1-  264     r0x100C:
                                    1-  265     	.res	1
                                    1-  266     .segment "uninit"
     0000                           1-  267     ___sdcc_saved_fsr:
                                    1-  268     	.res	1
                                    1-  270     .segment "uninit"
     0000                           1-  271     ___sdcc_saved_stk00:
                                    1-  272     	.res	1
                                    1-  274     .segment "uninit"
     0000                           1-  275     ___sdcc_saved_stk01:
                                    1-  276     	.res	1
                                    1-  278     ;--------------------------------------------------------
                                    1-  279     ; initialized data
                                    1-  280     ;--------------------------------------------------------
                                    1-  282     .segment "idata"
     0000                           1-  283     _slepp_time_count_1:
     0000 0000                      1-  286     	dw	0x00	; 0
                                    1-  289     .segment "idata"
     0000                           1-  290     _sleep_time_count_2:
     0000 0000                      1-  293     	dw	0x00	; 0
                                    1-  296     .segment "idata"
     0000                           1-  297     _old_key_value:
     0000 00FF                      1-  300     	dw	0xff	; 255
                                    1-  303     .segment "idata"
     0000                           1-  304     _Serial_Number:
     0000 0000                      1-  307     	dw	0x00	; 0
                                    1-  309     ;--------------------------------------------------------
                                    1-  310     ; initialized absolute data
                                    1-  311     ;--------------------------------------------------------
                                    1-  312     ;--------------------------------------------------------
                                    1-  313     ; overlayable items in internal ram 
                                    1-  314     ;--------------------------------------------------------
                                    1-  315     ;	udata_ovr
                                    1-  316     ;--------------------------------------------------------
                                    1-  317     ; reset vector 
                                    1-  318     ;--------------------------------------------------------
                                    1-  319     ORG	0x0000
     0000 3rrr                      1-  320     	LGOTO	__nyc_ny8_startup
                                    1-  321     ;--------------------------------------------------------
                                    1-  322     ; interrupt and initialization code
                                    1-  323     ;--------------------------------------------------------
                                    1-  324     ORG 0x0008
                                    1-  325     	MGOTO	__sdcc_interrupt
     0008 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  327     .segment "code"
     0000                           1-  328     __sdcc_interrupt:
                                    1-  329     ;***
                                    1-  330     ;  pBlock Stats: dbName = I
                                    1-  331     ;***
                                    1-  332     ;2 compiler assigned registers:
                                    1-  333     ;   STK00
                                    1-  334     ;   STK01
                                    1-  335     ;; Starting pCode block
     0000                           1-  336     _isr:
                                    1-  337     ; 0 exit points
                                    1-  338     	.line	21, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  339     	MOVAR	WSAVE
     0001 1503                      1-  340     	SWAPR	STATUS,W
     0002 0283                      1-  341     	CLRR	STATUS
     0003 00rr                      1-  342     	MOVAR	SSAVE
     0004 010A                      1-  343     	MOVR	PCHBUF,W
     0005 028A                      1-  344     	CLRR	PCHBUF
     0006 00rr                      1-  345     	MOVAR	PSAVE
     0007 0104                      1-  346     	MOVR	FSR,W
                                    1-  347     	BANKSEL	___sdcc_saved_fsr
     0008 rrrr                      3-  109 m1      .banksel ram_address
     0009 00rr                      1-  348     	MOVAR	___sdcc_saved_fsr
     000A 01rr                      1-  349     	MOVR	STK00,W
                                    1-  350     	BANKSEL	___sdcc_saved_stk00
     000B rrrr                      3-  109 m1      .banksel ram_address
     000C 00rr                      1-  351     	MOVAR	___sdcc_saved_stk00
     000D 01rr                      1-  352     	MOVR	STK01,W
                                    1-  353     	BANKSEL	___sdcc_saved_stk01
     000E rrrr                      3-  109 m1      .banksel ram_address
     000F 00rr                      1-  354     	MOVAR	___sdcc_saved_stk01
                                    1-  355     	.line	23, "main.c"; 	if(INTFbits.PABIF)
     0010 08rr                      1-  356     	BTRSS	_INTFbits,1
                                    1-  357     	MGOTO	_02007_DS_
     0011 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  358     	.line	25, "main.c"; 	key_status_change = 1;
     0012 2101                      1-  359     	MOVIA	0x01
                                    1-  360     	BANKSEL	_key_status_change
     0013 rrrr                      3-  109 m1      .banksel ram_address
     0014 00rr                      1-  361     	MOVAR	_key_status_change
                                    1-  362     	.line	26, "main.c"; 	INTFbits.PABIF = 0;					// 清除PABIF（PortB输入变化中断标志位）
     0015 21FD                      1-  363     	MOVIA	0xfd
     0016 00rr                      1-  364     	MOVAR	(_INTFbits + 0)
     0017                           1-  365     _02007_DS_:
                                    1-  366     	.line	28, "main.c"; 	}
                                    1-  367     	BANKSEL	___sdcc_saved_stk01
     0017 rrrr                      3-  109 m1      .banksel ram_address
     0018 01rr                      1-  368     	MOVR	___sdcc_saved_stk01,W
     0019 00rr                      1-  369     	MOVAR	STK01
                                    1-  370     	BANKSEL	___sdcc_saved_stk00
     001A rrrr                      3-  109 m1      .banksel ram_address
     001B 01rr                      1-  371     	MOVR	___sdcc_saved_stk00,W
     001C 00rr                      1-  372     	MOVAR	STK00
                                    1-  373     	BANKSEL	___sdcc_saved_fsr
     001D rrrr                      3-  109 m1      .banksel ram_address
     001E 01rr                      1-  374     	MOVR	___sdcc_saved_fsr,W
     001F 0084                      1-  375     	MOVAR	FSR
     0020 01rr                      1-  376     	MOVR	PSAVE,W
     0021 008A                      1-  377     	MOVAR	PCHBUF
     0022 0283                      1-  378     	CLRR	STATUS
     0023 15rr                      1-  379     	SWAPR	SSAVE,W
     0024 0083                      1-  380     	MOVAR	STATUS
     0025 15rr                      1-  381     	SWAPR	WSAVE,F
     0026 15rr                      1-  382     	SWAPR	WSAVE,W
     0027                           1-  383     END_OF_INTERRUPT:
     0027 0011                      1-  384     	RETIE	
                                    1-  386     ;--------------------------------------------------------
                                    1-  387     ; code
                                    1-  388     ;--------------------------------------------------------
                                    1-  389     ; code_main	code
                                    1-  390     ;***
                                    1-  391     ;  pBlock Stats: dbName = M
                                    1-  392     ;***
                                    1-  393     ;has an exit
                                    1-  394     ;functions called:
                                    1-  395     ;   _CS1630_init_main
                                    1-  396     ;   _wake_up_init
                                    1-  397     ;   _open_WDT
                                    1-  398     ;   _key_init
                                    1-  399     ;   _Check_Keydown
                                    1-  400     ;   _send_ble_packet
                                    1-  401     ;   _send_ble_packet
                                    1-  402     ;   _delay_ms
                                    1-  403     ;   _send_ble_packet
                                    1-  404     ;   _send_ble_packet
                                    1-  405     ;   _wake_up_init
                                    1-  406     ;   _close_WDT
                                    1-  407     ;   _open_WDT
                                    1-  408     ;   _CS1630_init_main
                                    1-  409     ;   _wake_up_init
                                    1-  410     ;   _open_WDT
                                    1-  411     ;   _key_init
                                    1-  412     ;   _Check_Keydown
                                    1-  413     ;   _send_ble_packet
                                    1-  414     ;   _send_ble_packet
                                    1-  415     ;   _delay_ms
                                    1-  416     ;   _send_ble_packet
                                    1-  417     ;   _send_ble_packet
                                    1-  418     ;   _wake_up_init
                                    1-  419     ;   _close_WDT
                                    1-  420     ;   _open_WDT
                                    1-  421     ;6 compiler assigned registers:
                                    1-  422     ;   r0x1009
                                    1-  423     ;   r0x100A
                                    1-  424     ;   r0x100B
                                    1-  425     ;   r0x100C
                                    1-  426     ;   STK01
                                    1-  427     ;   STK00
                                    1-  428     ;; Starting pCode block
                                    1-  429     .segment "code"; module=main, function=_main
                                    1-  431     ;local variable name mapping:
     0000                           1-  435     _main:
                                    1-  436     ; 2 exit points
                                    1-  437     	.line	69, "main.c"; 	DISI();
     0000 0013                      1-  438     	DISI
                                    1-  439     	.line	70, "main.c"; 	CS1630_init_main();
                                    1-  440     	MCALL	_CS1630_init_main
     0001 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  441     	.line	71, "main.c"; 	wake_up_init();
                                    1-  442     	MCALL	_wake_up_init
     0002 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  443     	.line	72, "main.c"; 	open_WDT();
                                    1-  444     	MCALL	_open_WDT
     0003 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  445     	.line	73, "main.c"; 	ENI();
     0004 0004                      1-  446     	ENI
                                    1-  447     	.line	78, "main.c"; 	unsigned char old_key_status = 0;
                                    1-  448     	BANKSEL	r0x1009
     0005 rrrr                      3-  109 m1      .banksel ram_address
     0006 02rr                      1-  449     	CLRR	r0x1009
                                    1-  450     	.line	79, "main.c"; 	key_status_change = 0;
                                    1-  451     	BANKSEL	_key_status_change
     0007 rrrr                      3-  109 m1      .banksel ram_address
     0008 02rr                      1-  452     	CLRR	_key_status_change
     0009                           1-  453     _02050_DS_:
                                    1-  454     	.line	83, "main.c"; 	CLRWDT();
     0009 0002                      1-  455     	clrwdt
                                    1-  456     	.line	84, "main.c"; 	key_init();
                                    1-  457     	MCALL	_key_init
     000A 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  458     	.line	85, "main.c"; 	key_value = Check_Keydown();
                                    1-  459     	MCALL	_Check_Keydown
     000B 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  460     	BANKSEL	r0x100A
     000C rrrr                      3-  109 m1      .banksel ram_address
     000D 00rr                      1-  461     	MOVAR	r0x100A
                                    1-  462     	.line	88, "main.c"; 	if(key_value != 0)
     000E 01rr                      1-  463     	MOVR	r0x100A,W
     000F 0D03                      1-  464     	BTRSC	STATUS,2
                                    1-  465     	MGOTO	_02029_DS_
     0010 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  466     	.line	90, "main.c"; 	slepp_time_count_1 = 0;
                                    1-  467     	BANKSEL	_slepp_time_count_1
     0011 rrrr                      3-  109 m1      .banksel ram_address
     0012 02rr                      1-  468     	CLRR	_slepp_time_count_1
                                    1-  469     	.line	91, "main.c"; 	sleep_time_count_2 = 0;
                                    1-  470     	BANKSEL	_sleep_time_count_2
     0013 rrrr                      3-  109 m1      .banksel ram_address
     0014 02rr                      1-  471     	CLRR	_sleep_time_count_2
                                    1-  472     	.line	92, "main.c"; 	Code_Value = key_value - 1;
                                    1-  473     	BANKSEL	r0x100A
     0015 rrrr                      3-  109 m1      .banksel ram_address
     0016 06rr                      1-  474     	DECR	r0x100A,W
                                    1-  475     	BANKSEL	r0x100B
     0017 rrrr                      3-  109 m1      .banksel ram_address
     0018 00rr                      1-  476     	MOVAR	r0x100B
                                    1-  477     	MGOTO	_02030_DS_
     0019 3rrr                      3-   62 m1      LGOTO rom_address
     001A                           1-  478     _02029_DS_:
                                    1-  479     	.line	96, "main.c"; 	Code_Value = 0xff;
     001A 21FF                      1-  480     	MOVIA	0xff
                                    1-  481     	BANKSEL	r0x100B
     001B rrrr                      3-  109 m1      .banksel ram_address
     001C 00rr                      1-  482     	MOVAR	r0x100B
     001D                           1-  483     _02030_DS_:
                                    1-  484     	.line	99, "main.c"; 	if(key_value != 0) // 当键值不为0
                                    1-  485     	BANKSEL	r0x100A
     001D rrrr                      3-  109 m1      .banksel ram_address
     001E 01rr                      1-  486     	MOVR	r0x100A,W
     001F 0D03                      1-  487     	BTRSC	STATUS,2
                                    1-  488     	MGOTO	_02041_DS_
     0020 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  489     	.line	101, "main.c"; 	if(old_key_status == 0) // 上一次按键扫描结果为空时，流水号增加
                                    1-  490     	BANKSEL	r0x1009
     0021 rrrr                      3-  109 m1      .banksel ram_address
     0022 01rr                      1-  491     	MOVR	r0x1009,W
     0023 0903                      1-  492     	BTRSS	STATUS,2
                                    1-  493     	MGOTO	_02038_DS_
     0024 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  494     	.line	103, "main.c"; 	Serial_Number++;
                                    1-  495     	BANKSEL	_Serial_Number
     0025 rrrr                      3-  109 m1      .banksel ram_address
     0026 01rr                      1-  496     	MOVR	_Serial_Number,W
                                    1-  497     	BANKSEL	r0x100C
     0027 rrrr                      3-  109 m1      .banksel ram_address
     0028 00rr                      1-  498     	MOVAR	r0x100C
     0029 05rr                      1-  499     	INCR	r0x100C,W
                                    1-  500     	BANKSEL	_Serial_Number
     002A rrrr                      3-  109 m1      .banksel ram_address
     002B 00rr                      1-  501     	MOVAR	_Serial_Number
                                    1-  502     	.line	104, "main.c"; 	send_ble_packet(Code_Value, 15, Serial_Number);
     002C 01rr                      1-  503     	MOVR	_Serial_Number,W
     002D 00rr                      1-  504     	MOVAR	STK01
     002E 210F                      1-  505     	MOVIA	0x0f
     002F 00rr                      1-  506     	MOVAR	STK00
                                    1-  507     	BANKSEL	r0x100B
     0030 rrrr                      3-  109 m1      .banksel ram_address
     0031 01rr                      1-  508     	MOVR	r0x100B,W
                                    1-  509     	MCALL	_send_ble_packet
     0032 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  510     	MGOTO	_02041_DS_
     0033 3rrr                      3-   62 m1      LGOTO rom_address
     0034                           1-  511     _02038_DS_:
                                    1-  512     	.line	108, "main.c"; 	if(key_value == old_key_value) // 当键值与旧键值一致
                                    1-  513     	BANKSEL	_old_key_value
     0034 rrrr                      3-  109 m1      .banksel ram_address
     0035 01rr                      1-  514     	MOVR	_old_key_value,W
                                    1-  515     	BANKSEL	r0x100A
     0036 rrrr                      3-  109 m1      .banksel ram_address
     0037 12rr                      1-  516     	XORAR	r0x100A,W
     0038 0903                      1-  517     	BTRSS	STATUS,2
                                    1-  518     	MGOTO	_02035_DS_
     0039 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  519     	.line	110, "main.c"; 	if(one_key_twice_dowm == 0) // 不是从中断跳出来的，流水号不增加,判定为长按
                                    1-  520     	BANKSEL	_one_key_twice_dowm
     003A rrrr                      3-  109 m1      .banksel ram_address
     003B 01rr                      1-  521     	MOVR	_one_key_twice_dowm,W
     003C 0903                      1-  522     	BTRSS	STATUS,2
                                    1-  523     	MGOTO	_02032_DS_
     003D 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  524     	.line	112, "main.c"; 	send_ble_packet(Code_Value, 0, Serial_Number);
                                    1-  525     	BANKSEL	_Serial_Number
     003E rrrr                      3-  109 m1      .banksel ram_address
     003F 01rr                      1-  526     	MOVR	_Serial_Number,W
     0040 00rr                      1-  527     	MOVAR	STK01
     0041 2100                      1-  528     	MOVIA	0x00
     0042 00rr                      1-  529     	MOVAR	STK00
                                    1-  530     	BANKSEL	r0x100B
     0043 rrrr                      3-  109 m1      .banksel ram_address
     0044 01rr                      1-  531     	MOVR	r0x100B,W
                                    1-  532     	MCALL	_send_ble_packet
     0045 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  533     	.line	113, "main.c"; 	delay_ms(90);
     0046 215A                      1-  534     	MOVIA	0x5a
                                    1-  535     	MCALL	_delay_ms
     0047 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  536     	MGOTO	_02041_DS_
     0048 3rrr                      3-   62 m1      LGOTO rom_address
     0049                           1-  537     _02032_DS_:
                                    1-  538     	.line	117, "main.c"; 	one_key_twice_dowm = 0;
                                    1-  539     	BANKSEL	_one_key_twice_dowm
     0049 rrrr                      3-  109 m1      .banksel ram_address
     004A 02rr                      1-  540     	CLRR	_one_key_twice_dowm
                                    1-  541     	.line	118, "main.c"; 	Serial_Number++;
                                    1-  542     	BANKSEL	_Serial_Number
     004B rrrr                      3-  109 m1      .banksel ram_address
     004C 01rr                      1-  543     	MOVR	_Serial_Number,W
                                    1-  544     	BANKSEL	r0x100C
     004D rrrr                      3-  109 m1      .banksel ram_address
     004E 00rr                      1-  545     	MOVAR	r0x100C
     004F 05rr                      1-  546     	INCR	r0x100C,W
                                    1-  547     	BANKSEL	_Serial_Number
     0050 rrrr                      3-  109 m1      .banksel ram_address
     0051 00rr                      1-  548     	MOVAR	_Serial_Number
                                    1-  549     	.line	119, "main.c"; 	send_ble_packet(Code_Value, 15, Serial_Number);
     0052 01rr                      1-  550     	MOVR	_Serial_Number,W
     0053 00rr                      1-  551     	MOVAR	STK01
     0054 210F                      1-  552     	MOVIA	0x0f
     0055 00rr                      1-  553     	MOVAR	STK00
                                    1-  554     	BANKSEL	r0x100B
     0056 rrrr                      3-  109 m1      .banksel ram_address
     0057 01rr                      1-  555     	MOVR	r0x100B,W
                                    1-  556     	MCALL	_send_ble_packet
     0058 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  557     	MGOTO	_02041_DS_
     0059 3rrr                      3-   62 m1      LGOTO rom_address
     005A                           1-  558     _02035_DS_:
                                    1-  559     	.line	124, "main.c"; 	Serial_Number++;
                                    1-  560     	BANKSEL	_Serial_Number
     005A rrrr                      3-  109 m1      .banksel ram_address
     005B 01rr                      1-  561     	MOVR	_Serial_Number,W
                                    1-  562     	BANKSEL	r0x100C
     005C rrrr                      3-  109 m1      .banksel ram_address
     005D 00rr                      1-  563     	MOVAR	r0x100C
     005E 05rr                      1-  564     	INCR	r0x100C,W
                                    1-  565     	BANKSEL	_Serial_Number
     005F rrrr                      3-  109 m1      .banksel ram_address
     0060 00rr                      1-  566     	MOVAR	_Serial_Number
                                    1-  567     	.line	125, "main.c"; 	send_ble_packet(Code_Value, 15, Serial_Number);
     0061 01rr                      1-  568     	MOVR	_Serial_Number,W
     0062 00rr                      1-  569     	MOVAR	STK01
     0063 210F                      1-  570     	MOVIA	0x0f
     0064 00rr                      1-  571     	MOVAR	STK00
                                    1-  572     	BANKSEL	r0x100B
     0065 rrrr                      3-  109 m1      .banksel ram_address
     0066 01rr                      1-  573     	MOVR	r0x100B,W
                                    1-  574     	MCALL	_send_ble_packet
     0067 2rrr                      3-   65 m1      LCALL rom_address
     0068                           1-  575     _02041_DS_:
                                    1-  576     	.line	129, "main.c"; 	CLRWDT();
     0068 0002                      1-  577     	clrwdt
                                    1-  578     	.line	132, "main.c"; 	if(key_value != 0)
                                    1-  579     	BANKSEL	r0x100A
     0069 rrrr                      3-  109 m1      .banksel ram_address
     006A 01rr                      1-  580     	MOVR	r0x100A,W
     006B 0D03                      1-  581     	BTRSC	STATUS,2
                                    1-  582     	MGOTO	_02043_DS_
     006C 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  583     	.line	134, "main.c"; 	old_key_status = 1;
     006D 2101                      1-  584     	MOVIA	0x01
                                    1-  585     	BANKSEL	r0x1009
     006E rrrr                      3-  109 m1      .banksel ram_address
     006F 00rr                      1-  586     	MOVAR	r0x1009
                                    1-  587     	.line	135, "main.c"; 	old_key_value = key_value;
                                    1-  588     	BANKSEL	r0x100A
     0070 rrrr                      3-  109 m1      .banksel ram_address
     0071 01rr                      1-  589     	MOVR	r0x100A,W
                                    1-  590     	BANKSEL	_old_key_value
     0072 rrrr                      3-  109 m1      .banksel ram_address
     0073 00rr                      1-  591     	MOVAR	_old_key_value
                                    1-  592     	MGOTO	_02044_DS_
     0074 3rrr                      3-   62 m1      LGOTO rom_address
     0075                           1-  593     _02043_DS_:
                                    1-  594     	.line	139, "main.c"; 	old_key_status = 0;
                                    1-  595     	BANKSEL	r0x1009
     0075 rrrr                      3-  109 m1      .banksel ram_address
     0076 02rr                      1-  596     	CLRR	r0x1009
     0077                           1-  597     _02044_DS_:
                                    1-  598     	.line	143, "main.c"; 	slepp_time_count_1 ++;
                                    1-  599     	BANKSEL	_slepp_time_count_1
     0077 rrrr                      3-  109 m1      .banksel ram_address
     0078 01rr                      1-  600     	MOVR	_slepp_time_count_1,W
                                    1-  601     	BANKSEL	r0x100A
     0079 rrrr                      3-  109 m1      .banksel ram_address
     007A 00rr                      1-  602     	MOVAR	r0x100A
     007B 05rr                      1-  603     	INCR	r0x100A,W
                                    1-  604     	BANKSEL	_slepp_time_count_1
     007C rrrr                      3-  109 m1      .banksel ram_address
     007D 00rr                      1-  605     	MOVAR	_slepp_time_count_1
                                    1-  606     	.line	144, "main.c"; 	if(slepp_time_count_1 == 255)
     007E 01rr                      1-  607     	MOVR	_slepp_time_count_1,W
     007F 24FF                      1-  608     	XORIA	0xff
     0080 0903                      1-  609     	BTRSS	STATUS,2
                                    1-  610     	MGOTO	_02046_DS_
     0081 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  611     	.line	146, "main.c"; 	slepp_time_count_1 = 0;
     0082 02rr                      1-  612     	CLRR	_slepp_time_count_1
                                    1-  613     	.line	147, "main.c"; 	sleep_time_count_2 ++;
                                    1-  614     	BANKSEL	_sleep_time_count_2
     0083 rrrr                      3-  109 m1      .banksel ram_address
     0084 01rr                      1-  615     	MOVR	_sleep_time_count_2,W
                                    1-  616     	BANKSEL	r0x100A
     0085 rrrr                      3-  109 m1      .banksel ram_address
     0086 00rr                      1-  617     	MOVAR	r0x100A
     0087 05rr                      1-  618     	INCR	r0x100A,W
                                    1-  619     	BANKSEL	_sleep_time_count_2
     0088 rrrr                      3-  109 m1      .banksel ram_address
     0089 00rr                      1-  620     	MOVAR	_sleep_time_count_2
     008A                           1-  621     _02046_DS_:
                                    1-  622     	.line	149, "main.c"; 	if(sleep_time_count_2 == 20)
                                    1-  623     	BANKSEL	_sleep_time_count_2
     008A rrrr                      3-  109 m1      .banksel ram_address
     008B 01rr                      1-  624     	MOVR	_sleep_time_count_2,W
     008C 2414                      1-  625     	XORIA	0x14
     008D 0903                      1-  626     	BTRSS	STATUS,2
                                    1-  627     	MGOTO	_02050_DS_
     008E 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  628     	.line	151, "main.c"; 	sleep_time_count_2 = 0;
     008F 02rr                      1-  629     	CLRR	_sleep_time_count_2
                                    1-  630     	.line	152, "main.c"; 	wake_up_init();
                                    1-  631     	MCALL	_wake_up_init
     0090 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  632     	.line	153, "main.c"; 	close_WDT();
                                    1-  633     	MCALL	_close_WDT
     0091 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  634     	.line	154, "main.c"; 	UPDATE_REG(PORTA);
     0092 01rr                      1-  635     	MOVR	_PORTA,F
                                    1-  636     	.line	155, "main.c"; 	INTF = 0x00;
     0093 02rr                      1-  637     	CLRR	_INTF
                                    1-  638     	.line	156, "main.c"; 	SLEEP();
     0094 0001                      1-  639     	sleep
                                    1-  640     	.line	157, "main.c"; 	open_WDT();
                                    1-  641     	MCALL	_open_WDT
     0095 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  642     	MGOTO	_02050_DS_
     0096 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  643     	.line	160, "main.c"; 	}
                                    1-  644     	RETURN	
     0097 0010                      3-   39 m1      ret
                                    1-  645     ; exit point of _main
                                    1-  647     ;***
                                    1-  648     ;  pBlock Stats: dbName = C
                                    1-  649     ;***
                                    1-  650     ;has an exit
                                    1-  651     ;functions called:
                                    1-  652     ;   _CS1630_Init
                                    1-  653     ;   _CS1630_CE_Low
                                    1-  654     ;   _CS1630_ModeSwitch
                                    1-  655     ;   _CS1630_write_byte
                                    1-  656     ;   _CS1630_write_byte
                                    1-  657     ;   _CS1630_write_byte
                                    1-  658     ;   _CS1630_write_byte
                                    1-  659     ;   _delay_ms
                                    1-  660     ;   _CS1630_Init
                                    1-  661     ;   _CS1630_CE_Low
                                    1-  662     ;   _CS1630_ModeSwitch
                                    1-  663     ;   _CS1630_write_byte
                                    1-  664     ;   _CS1630_write_byte
                                    1-  665     ;   _CS1630_write_byte
                                    1-  666     ;   _CS1630_write_byte
                                    1-  667     ;   _delay_ms
                                    1-  668     ;1 compiler assigned register :
                                    1-  669     ;   STK00
                                    1-  670     ;; Starting pCode block
                                    1-  671     .segment "code"; module=main, function=_CS1630_init_main
     0000                           1-  673     _CS1630_init_main:
                                    1-  674     ; 2 exit points
                                    1-  675     	.line	55, "main.c"; 	CS1630_Init(); // 初始化CS1630模块
                                    1-  676     	MCALL	_CS1630_Init
     0000 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  677     	.line	56, "main.c"; 	CS1630_CE_Low(); // 设置CE引脚为低电平，准备发送数据
                                    1-  678     	MCALL	_CS1630_CE_Low
     0001 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  679     	.line	57, "main.c"; 	CS1630_ModeSwitch(Rf_PTX_Mode); // 切换到发送模式
     0002 2101                      1-  680     	MOVIA	0x01
                                    1-  681     	MCALL	_CS1630_ModeSwitch
     0003 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  682     	.line	60, "main.c"; 	CS1630_write_byte(CS1630_BANK0_FEATURE, 0x04);
     0004 2104                      1-  683     	MOVIA	0x04
     0005 00rr                      1-  684     	MOVAR	STK00
     0006 211D                      1-  685     	MOVIA	0x1d
                                    1-  686     	MCALL	_CS1630_write_byte
     0007 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  687     	.line	61, "main.c"; 	CS1630_write_byte(CS1630_BANK0_CONFIG, 0x0f);
     0008 210F                      1-  688     	MOVIA	0x0f
     0009 00rr                      1-  689     	MOVAR	STK00
     000A 2100                      1-  690     	MOVIA	0x00
                                    1-  691     	MCALL	_CS1630_write_byte
     000B 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  692     	.line	62, "main.c"; 	CS1630_write_byte(CS1630_BANK0_SETUP_VALUE, 0x04); // 开启BLE模式
     000C 2104                      1-  693     	MOVIA	0x04
     000D 00rr                      1-  694     	MOVAR	STK00
     000E 211E                      1-  695     	MOVIA	0x1e
                                    1-  696     	MCALL	_CS1630_write_byte
     000F 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  697     	.line	63, "main.c"; 	CS1630_write_byte(CS1630_BANK0_CONFIG, 0x0d);
     0010 210D                      1-  698     	MOVIA	0x0d
     0011 00rr                      1-  699     	MOVAR	STK00
     0012 2100                      1-  700     	MOVIA	0x00
                                    1-  701     	MCALL	_CS1630_write_byte
     0013 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  702     	.line	64, "main.c"; 	delay_ms(2);
     0014 2102                      1-  703     	MOVIA	0x02
                                    1-  704     	MCALL	_delay_ms
     0015 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  705     	.line	65, "main.c"; 	}
                                    1-  706     	RETURN	
     0016 0010                      3-   39 m1      ret
                                    1-  707     ; exit point of _CS1630_init_main
                                    1-  709     ;***
                                    1-  710     ;  pBlock Stats: dbName = C
                                    1-  711     ;***
                                    1-  712     ;has an exit
                                    1-  713     ;; Starting pCode block
                                    1-  714     .segment "code"; module=main, function=_close_WDT
     0000                           1-  716     _close_WDT:
                                    1-  717     ; 2 exit points
                                    1-  718     	.line	49, "main.c"; 	PCON &= ~C_WDT_En;
     0000 1Frr                      1-  719     	BCR	_PCON,7
                                    1-  720     	.line	50, "main.c"; 	PCON &= ~C_LVR_En;
     0001 1Drr                      1-  721     	BCR	_PCON,3
                                    1-  722     	.line	51, "main.c"; 	}
                                    1-  723     	RETURN	
     0002 0010                      3-   39 m1      ret
                                    1-  724     ; exit point of _close_WDT
                                    1-  726     ;***
                                    1-  727     ;  pBlock Stats: dbName = C
                                    1-  728     ;***
                                    1-  729     ;has an exit
                                    1-  730     ;; Starting pCode block
                                    1-  731     .segment "code"; module=main, function=_open_WDT
     0000                           1-  733     _open_WDT:
                                    1-  734     ; 2 exit points
                                    1-  735     	.line	43, "main.c"; 	PCON |= C_WDT_En;	//使能看门狗
     0000 1Brr                      1-  736     	BSR	_PCON,7
                                    1-  737     	.line	44, "main.c"; 	PCON |= C_LVR_En;	//低压复位使能
     0001 19rr                      1-  738     	BSR	_PCON,3
                                    1-  739     	.line	45, "main.c"; 	}
                                    1-  740     	RETURN	
     0002 0010                      3-   39 m1      ret
                                    1-  741     ; exit point of _open_WDT
                                    1-  743     ;***
                                    1-  744     ;  pBlock Stats: dbName = C
                                    1-  745     ;***
                                    1-  746     ;has an exit
                                    1-  747     ;; Starting pCode block
                                    1-  748     .segment "code"; module=main, function=_wake_up_init
     0000                           1-  750     _wake_up_init:
                                    1-  751     ; 2 exit points
                                    1-  752     	.line	32, "main.c"; 	AWUCON = 0xfc;
     0000 21FC                      1-  753     	MOVIA	0xfc
     0001 00rr                      1-  754     	MOVAR	_AWUCON
                                    1-  755     	.line	33, "main.c"; 	BWUCON = 0x00;
     0002 02rr                      1-  756     	CLRR	_BWUCON
                                    1-  757     	.line	34, "main.c"; 	IOSTA = C_PA2_Input | C_PA3_Input | C_PA4_Input | C_PA5_Input | C_PA6_Input | C_PA7_Input;  // 配置PA2、3、4、5、6、7为输入
     0003 21FC                      1-  758     	MOVIA	0xfc
     0004 000r                      1-  759     	IOST	_IOSTA
                                    1-  760     	.line	35, "main.c"; 	APHCON = 0b00100011; // 设置2、3、4、6、7上拉
     0005 2123                      1-  761     	MOVIA	0x23
     0006 000r                      1-  762     	IOST	_APHCON
                                    1-  763     	.line	37, "main.c"; 	INTE = C_INT_PABKey;
     0007 2102                      1-  764     	MOVIA	0x02
     0008 00rr                      1-  765     	MOVAR	_INTE
                                    1-  766     	.line	38, "main.c"; 	INTF = 0x00;
     0009 02rr                      1-  767     	CLRR	_INTF
                                    1-  768     	.line	39, "main.c"; 	}
                                    1-  769     	RETURN	
     000A 0010                      3-   39 m1      ret
                                    1-  770     ; exit point of _wake_up_init
                                    1-  773     ;	code size estimation:
                                    1-  774     ;	  179+   47 =   226 instructions (  546 byte)
                                    1-  776     	end

SYMBOL TABLE            TYPE     VALUE
__pin_count__           Constant 0000000E
__processor__           Constant 00800544
C                       Constant 00000000
DC                      Constant 00000001
ENABLE_RAM_BANK         Constant 00000001
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
STATUS                  Constant 00000003
USEFGOTO                Constant 00000000
W                       Constant 00000000
Z                       Constant 00000002


SOURCE FILE TABLE
001 OBJ/main.s
002 ny8a054e.inc
003 common.inc
004 main.c

PROCESSOR    = NY8A054E (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000007FF
DATA ROM     = 0x00000000 - 0x000007FF
SRAM / SFR   = 0x00000000 - 0x00000000
