
                    Nyquest Technology Co., Ltd.

NYASM 2.42

    ADDR  OPCODE/VALUE              LINE   TAG  SOURCE                   STATEMENT    

                                    1-    1     ;--------------------------------------------------------
                                    1-    2     ; File Created by SDCC : free open source ISO C Compiler 
                                    1-    3     ; Version 4.2.2 #0 (MSVC)
                                    1-    4     ;--------------------------------------------------------
                                    1-    5     ; NY8A port
                                    1-    6     ;--------------------------------------------------------
                                    1-    7     	.file	"main.c"
                                    1-    8     	list	p=NY8A054E,c=on
                                    1-    9     	#include "ny8a054e.inc"
                                    2-    1     #include "common.inc"
                                    3-    1     ;; header file for 8 bit series assembly -*- mode:asm; coding:utf-8; -*-
                                    3-    2     ;; author    Ting
                                    3-    3     ;; date      2020-12-24
                                    3-    4     ;;
                                    3-    5     ;; # constant definition
                                    3-    6     ;;
                                    3-    7     ;; ## instruction result store destination
                                    3-    8     ;;  - W: the result is stored in the ACC.
                                    3-    9     ;;  - F: the result is stored back in register.
                                    3-   10     ;; ## flag name in STATUS register
                                    3-   11     ;;  - C, DC, Z
                                    3-   12     ;;
                                    3-   13     ;; # macro define
                                    3-   14     ;;
                                    3-   15     ;; ## RETURN, used by C compiler, end of function
                                    3-   16     ;; ## PAGESEL, empty macro, maybe used by C compiler (bug?)
                                    3-   17     ;; ## BANKSEL, replace by .banksel pseudo command, empty if disable bank.
                                    3-   18     ;; ## MGOTO, replace by LGOTO (ic<=2K word) or FGOTO (ic>2K word)
                                    3-   19     ;; ## MCALL, same as above
                                    3-   20     ;;
                                    3-   21     W       EQU 0
                                    3-   21     ;W = 0
                                    3-   22     F       EQU 1
                                    3-   22     ;F = 1
                                    3-   23     C		EQU	0
                                    3-   23     ;C = 0
                                    3-   24     DC		EQU	1
                                    3-   24     ;DC = 1
                                    3-   25     Z		EQU	2
                                    3-   25     ;Z = 2
                                    3-   28     ;; common register for all series
                                    3-   29     INDF    EQU 0x00
                                    3-   29     ;INDF = 0
                                    3-   30     PCL     EQU 0x02
                                    3-   30     ;PCL = 2
                                    3-   31     STATUS  EQU 0x03
                                    3-   31     ;STATUS = 3
                                    3-   32     FSR     EQU 0x04
                                    3-   32     ;FSR = 4
                                    3-   33     PCHBUF  EQU 0x0A
                                    3-   33     ;PCHBUF = 10
                                    1-   11     ;--------------------------------------------------------
                                    1-   12     ; external declarations
                                    1-   13     ;--------------------------------------------------------
                                    1-   14     	extern	_get_rolling_code_3
                                    1-   15     	extern	_get_rolling_code_2
                                    1-   16     	extern	_get_rolling_code_1
                                    1-   17     	extern	_get_rolling_code_0
                                    1-   18     	extern	_send_ble_packet
                                    1-   19     	extern	_Check_Keydown
                                    1-   20     	extern	_set_PB_low
                                    1-   21     	extern	_set_PA_low
                                    1-   22     	extern	_key_init
                                    1-   23     	extern	_delay_40us
                                    1-   24     	extern	_delay_us
                                    1-   25     	extern	_delay_250ms
                                    1-   26     	extern	_delay_ms
                                    1-   27     	extern	_CS1630_Dump_RF_Register
                                    1-   28     	extern	_Enter_sleep
                                    1-   29     	extern	_CS1630_SendPack
                                    1-   30     	extern	_CS1630_wr_buffer
                                    1-   31     	extern	_CS1630_write_byte
                                    1-   32     	extern	_CS1630_read_byte
                                    1-   33     	extern	_CS1630_read_buffer
                                    1-   34     	extern	_CS1630_Bank_Switch
                                    1-   35     	extern	_CS1630_ModeSwitch
                                    1-   36     	extern	_CS1630_CE_Low
                                    1-   37     	extern	_CS1630_CE_High
                                    1-   38     	extern	_CS1630_Flush_Tx
                                    1-   39     	extern	_CS1630_Clear_All_Irq
                                    1-   40     	extern	_CS1630_Init
                                    1-   41     	extern	_CS1630_Soft_Rst
                                    1-   42     	extern	_SPI_ReadByte
                                    1-   43     	extern	_SPI_SendByte
                                    1-   44     	extern	_RF_softSPI_Init
                                    1-   45     	extern	_RF_Init
                                    1-   46     	extern	_RF_wr_cmd
                                    1-   47     	extern	_RF_write_byte
                                    1-   48     	extern	_RF_wr_buffer
                                    1-   49     	extern	_RF_Write_Ack_Payload
                                    1-   50     	extern	_RF_spi_wrd
                                    1-   51     	extern	_RF_Soft_Rst
                                    1-   52     	extern	_RF_SendPack
                                    1-   53     	extern	_RF_ReceivePack
                                    1-   54     	extern	_RF_Read_Status
                                    1-   55     	extern	_RF_read_byte
                                    1-   56     	extern	_RF_read_buffer
                                    1-   57     	extern	_RF_Operation
                                    1-   58     	extern	_RF_ModeSwitch
                                    1-   59     	extern	_RF_Get_RSSI
                                    1-   60     	extern	_RF_Get_Chip_ID
                                    1-   61     	extern	_RF_Flush_Tx
                                    1-   62     	extern	_RF_Flush_Rx
                                    1-   63     	extern	_RF_Configure_Reg
                                    1-   64     	extern	_RF_Clear_All_Irq
                                    1-   65     	extern	_RF_Change_Pwr
                                    1-   66     	extern	_RF_Change_CH
                                    1-   67     	extern	_RF_ChangeAddr_Reg
                                    1-   68     	extern	_RF_CE_Low
                                    1-   69     	extern	_RF_CE_High_Pulse
                                    1-   70     	extern	_RF_CE_High
                                    1-   71     	extern	_RF_Bank_Switch
                                    1-   72     	extern	_clear_ram
                                    1-   73     	extern	_multi_16b
                                    1-   74     	extern	_T0MD
                                    1-   75     	extern	_PCON1
                                    1-   76     	extern	_CMPCR
                                    1-   77     	extern	_BODCON
                                    1-   78     	extern	_PS0CV
                                    1-   79     	extern	_APHCON
                                    1-   80     	extern	_IOSTB
                                    1-   81     	extern	_IOSTA
                                    1-   82     	extern	_PWM5RH
                                    1-   83     	extern	_PWM5DUTY
                                    1-   84     	extern	_P5CR1
                                    1-   85     	extern	_PWM4DUTY
                                    1-   86     	extern	_P4CR1
                                    1-   87     	extern	_PS3CV
                                    1-   88     	extern	_PWM3DUTY
                                    1-   89     	extern	_T3CR2
                                    1-   90     	extern	_T3CR1
                                    1-   91     	extern	_TMR3
                                    1-   92     	extern	_OSCCR
                                    1-   93     	extern	_PWM2DUTY
                                    1-   94     	extern	_P2CR1
                                    1-   95     	extern	_TBHD
                                    1-   96     	extern	_TBHP
                                    1-   97     	extern	_IRCR
                                    1-   98     	extern	_BZ1CR
                                    1-   99     	extern	_PS1CV
                                    1-  100     	extern	_PWM1DUTY
                                    1-  101     	extern	_T1CR2
                                    1-  102     	extern	_T1CR1
                                    1-  103     	extern	_TMR1
                                    1-  104     	extern	_TM34RH
                                    1-  105     	extern	_TMRH
                                    1-  106     	extern	_PCHBUF
                                    1-  107     	extern	_STATUS
                                    1-  108     	extern	_PCL
                                    1-  109     	extern	_TMR0
                                    1-  110     	extern	_rolling_code_2
                                    1-  111     	extern	_rolling_code_1
                                    1-  112     	extern	_rolling_code_0
                                    1-  113     	extern	_one_key_twice_dowm
                                    1-  114     	extern	_key_status_change
                                    1-  115     	extern	_SLEEP_STATUS
                                    1-  116     	extern	_INTE2bits
                                    1-  117     	extern	_RFCbits
                                    1-  118     	extern	_INTEDGbits
                                    1-  119     	extern	_AWUCONbits
                                    1-  120     	extern	_INTFbits
                                    1-  121     	extern	_INTEbits
                                    1-  122     	extern	_BPHCONbits
                                    1-  123     	extern	_ABPLCONbits
                                    1-  124     	extern	_BWUCONbits
                                    1-  125     	extern	_PCONbits
                                    1-  126     	extern	_PORTBbits
                                    1-  127     	extern	_PORTAbits
                                    1-  128     	extern	__nyc_ny8_startup
                                    1-  129     ;--------------------------------------------------------
                                    1-  130     ; global declarations
                                    1-  131     ;--------------------------------------------------------
                                    1-  132     	extern	_main
                                    1-  133     	extern	_CS1630_init_main
                                    1-  134     	extern	_close_WDT
                                    1-  135     	extern	_open_WDT
                                    1-  136     	extern	_wake_up_init
                                    1-  137     	extern	_isr
                                    1-  138     	extern	_INTE2
                                    1-  139     	extern	_RFC
                                    1-  140     	extern	_INTEDG
                                    1-  141     	extern	_AWUCON
                                    1-  142     	extern	_INTF
                                    1-  143     	extern	_INTE
                                    1-  144     	extern	_BPHCON
                                    1-  145     	extern	_ABPLCON
                                    1-  146     	extern	_BWUCON
                                    1-  147     	extern	_PCON
                                    1-  148     	extern	_PORTB
                                    1-  149     	extern	_PORTA
                                    1-  150     	extern	_Serial_Number
                                    1-  151     	extern	_old_key_value
                                    1-  152     	extern	_sleep_time_count_2
                                    1-  153     	extern	_slepp_time_count_1
                                    1-  155     	extern PSAVE
                                    1-  156     	extern SSAVE
                                    1-  157     	extern WSAVE
                                    1-  158     	extern STK12
                                    1-  159     	extern ___STK12
                                    1-  160     	extern STK11
                                    1-  161     	extern ___STK11
                                    1-  162     	extern STK10
                                    1-  163     	extern ___STK10
                                    1-  164     	extern STK09
                                    1-  165     	extern ___STK09
                                    1-  166     	extern STK08
                                    1-  167     	extern ___STK08
                                    1-  168     	extern STK07
                                    1-  169     	extern ___STK07
                                    1-  170     	extern STK06
                                    1-  171     	extern ___STK06
                                    1-  172     	extern STK05
                                    1-  173     	extern ___STK05
                                    1-  174     	extern STK04
                                    1-  175     	extern ___STK04
                                    1-  176     	extern STK03
                                    1-  177     	extern ___STK03
                                    1-  178     	extern STK02
                                    1-  179     	extern ___STK02
                                    1-  180     	extern STK01
                                    1-  181     	extern ___STK01
                                    1-  182     	extern STK00
                                    1-  183     	extern ___STK00
                                    1-  185     .segment "share_bank"
     0000                           1-  186     PSAVE:
                                    1-  187     	.res 1
                                    1-  188     .segment "share_bank"
     0000                           1-  189     SSAVE:
                                    1-  190     	.res 1
                                    1-  191     .segment "share_bank"
     0000                           1-  192     WSAVE:
                                    1-  193     	.res 1
                                    1-  194     .segment "share_bank"
     0000                           1-  195     ___STK12:
     0000                           1-  196     STK12:
                                    1-  197     	.res 1
                                    1-  198     .segment "share_bank"
     0000                           1-  199     ___STK11:
     0000                           1-  200     STK11:
                                    1-  201     	.res 1
                                    1-  202     .segment "share_bank"
     0000                           1-  203     ___STK10:
     0000                           1-  204     STK10:
                                    1-  205     	.res 1
                                    1-  206     .segment "share_bank"
     0000                           1-  207     ___STK09:
     0000                           1-  208     STK09:
                                    1-  209     	.res 1
                                    1-  210     .segment "share_bank"
     0000                           1-  211     ___STK08:
     0000                           1-  212     STK08:
                                    1-  213     	.res 1
                                    1-  214     .segment "share_bank"
     0000                           1-  215     ___STK07:
     0000                           1-  216     STK07:
                                    1-  217     	.res 1
                                    1-  218     .segment "share_bank"
     0000                           1-  219     ___STK06:
     0000                           1-  220     STK06:
                                    1-  221     	.res 1
                                    1-  222     .segment "share_bank"
     0000                           1-  223     ___STK05:
     0000                           1-  224     STK05:
                                    1-  225     	.res 1
                                    1-  226     .segment "share_bank"
     0000                           1-  227     ___STK04:
     0000                           1-  228     STK04:
                                    1-  229     	.res 1
                                    1-  230     .segment "share_bank"
     0000                           1-  231     ___STK03:
     0000                           1-  232     STK03:
                                    1-  233     	.res 1
                                    1-  234     .segment "share_bank"
     0000                           1-  235     ___STK02:
     0000                           1-  236     STK02:
                                    1-  237     	.res 1
                                    1-  238     .segment "share_bank"
     0000                           1-  239     ___STK01:
     0000                           1-  240     STK01:
                                    1-  241     	.res 1
                                    1-  242     .segment "share_bank"
     0000                           1-  243     ___STK00:
     0000                           1-  244     STK00:
                                    1-  245     	.res 1
                                    1-  247     ;--------------------------------------------------------
                                    1-  248     ; global definitions
                                    1-  249     ;--------------------------------------------------------
                                    1-  250     ;--------------------------------------------------------
                                    1-  251     ; absolute symbol definitions
                                    1-  252     ;--------------------------------------------------------
                                    1-  253     ;--------------------------------------------------------
                                    1-  254     ; compiler-defined variables
                                    1-  255     ;--------------------------------------------------------
                                    1-  256     .segment "uninit"
     0000                           1-  257     r0x100C:
                                    1-  258     	.res	1
                                    1-  259     .segment "uninit"
     0000                           1-  260     r0x100D:
                                    1-  261     	.res	1
                                    1-  262     .segment "uninit"
     0000                           1-  263     r0x100E:
                                    1-  264     	.res	1
                                    1-  265     .segment "uninit"
     0000                           1-  266     r0x100F:
                                    1-  267     	.res	1
                                    1-  268     .segment "uninit"
     0000                           1-  269     ___sdcc_saved_fsr:
                                    1-  270     	.res	1
                                    1-  272     .segment "uninit"
     0000                           1-  273     ___sdcc_saved_stk00:
                                    1-  274     	.res	1
                                    1-  276     .segment "uninit"
     0000                           1-  277     ___sdcc_saved_stk01:
                                    1-  278     	.res	1
                                    1-  280     ;--------------------------------------------------------
                                    1-  281     ; initialized data
                                    1-  282     ;--------------------------------------------------------
                                    1-  284     .segment "idata"
     0000                           1-  285     _slepp_time_count_1:
     0000 0000                      1-  288     	dw	0x00	; 0
                                    1-  291     .segment "idata"
     0000                           1-  292     _sleep_time_count_2:
     0000 0000                      1-  295     	dw	0x00	; 0
                                    1-  298     .segment "idata"
     0000                           1-  299     _old_key_value:
     0000 00FF                      1-  302     	dw	0xff	; 255
                                    1-  305     .segment "idata"
     0000                           1-  306     _Serial_Number:
     0000 0000                      1-  309     	dw	0x00	; 0
                                    1-  311     ;--------------------------------------------------------
                                    1-  312     ; initialized absolute data
                                    1-  313     ;--------------------------------------------------------
                                    1-  314     ;--------------------------------------------------------
                                    1-  315     ; overlayable items in internal ram 
                                    1-  316     ;--------------------------------------------------------
                                    1-  317     ;	udata_ovr
                                    1-  318     ;--------------------------------------------------------
                                    1-  319     ; reset vector 
                                    1-  320     ;--------------------------------------------------------
                                    1-  321     ORG	0x0000
     0000 3rrr                      1-  322     	LGOTO	__nyc_ny8_startup
                                    1-  323     ;--------------------------------------------------------
                                    1-  324     ; interrupt and initialization code
                                    1-  325     ;--------------------------------------------------------
                                    1-  326     ORG 0x0008
                                    1-  327     	MGOTO	__sdcc_interrupt
     0008 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  329     .segment "code"
     0000                           1-  330     __sdcc_interrupt:
                                    1-  331     ;***
                                    1-  332     ;  pBlock Stats: dbName = I
                                    1-  333     ;***
                                    1-  334     ;2 compiler assigned registers:
                                    1-  335     ;   STK00
                                    1-  336     ;   STK01
                                    1-  337     ;; Starting pCode block
     0000                           1-  338     _isr:
                                    1-  339     ; 0 exit points
                                    1-  340     	.line	21, "main.c"; 	void isr(void) __interrupt(0)
     0000 00rr                      1-  341     	MOVAR	WSAVE
     0001 1503                      1-  342     	SWAPR	STATUS,W
     0002 0283                      1-  343     	CLRR	STATUS
     0003 00rr                      1-  344     	MOVAR	SSAVE
     0004 010A                      1-  345     	MOVR	PCHBUF,W
     0005 028A                      1-  346     	CLRR	PCHBUF
     0006 00rr                      1-  347     	MOVAR	PSAVE
     0007 0104                      1-  348     	MOVR	FSR,W
                                    1-  349     	BANKSEL	___sdcc_saved_fsr
     0008 rrrr                      3-  109 m1      .banksel ram_address
     0009 00rr                      1-  350     	MOVAR	___sdcc_saved_fsr
     000A 01rr                      1-  351     	MOVR	STK00,W
                                    1-  352     	BANKSEL	___sdcc_saved_stk00
     000B rrrr                      3-  109 m1      .banksel ram_address
     000C 00rr                      1-  353     	MOVAR	___sdcc_saved_stk00
     000D 01rr                      1-  354     	MOVR	STK01,W
                                    1-  355     	BANKSEL	___sdcc_saved_stk01
     000E rrrr                      3-  109 m1      .banksel ram_address
     000F 00rr                      1-  356     	MOVAR	___sdcc_saved_stk01
                                    1-  357     	.line	23, "main.c"; 	if(INTFbits.PABIF)
     0010 08rr                      1-  358     	BTRSS	_INTFbits,1
                                    1-  359     	MGOTO	_02007_DS_
     0011 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  360     	.line	25, "main.c"; 	key_status_change = 1;
     0012 2101                      1-  361     	MOVIA	0x01
                                    1-  362     	BANKSEL	_key_status_change
     0013 rrrr                      3-  109 m1      .banksel ram_address
     0014 00rr                      1-  363     	MOVAR	_key_status_change
                                    1-  364     	.line	26, "main.c"; 	INTFbits.PABIF = 0;					// 清除PABIF（PortB输入变化中断标志位）
     0015 21FD                      1-  365     	MOVIA	0xfd
     0016 00rr                      1-  366     	MOVAR	(_INTFbits + 0)
     0017                           1-  367     _02007_DS_:
                                    1-  368     	.line	28, "main.c"; 	}
                                    1-  369     	BANKSEL	___sdcc_saved_stk01
     0017 rrrr                      3-  109 m1      .banksel ram_address
     0018 01rr                      1-  370     	MOVR	___sdcc_saved_stk01,W
     0019 00rr                      1-  371     	MOVAR	STK01
                                    1-  372     	BANKSEL	___sdcc_saved_stk00
     001A rrrr                      3-  109 m1      .banksel ram_address
     001B 01rr                      1-  373     	MOVR	___sdcc_saved_stk00,W
     001C 00rr                      1-  374     	MOVAR	STK00
                                    1-  375     	BANKSEL	___sdcc_saved_fsr
     001D rrrr                      3-  109 m1      .banksel ram_address
     001E 01rr                      1-  376     	MOVR	___sdcc_saved_fsr,W
     001F 0084                      1-  377     	MOVAR	FSR
     0020 01rr                      1-  378     	MOVR	PSAVE,W
     0021 008A                      1-  379     	MOVAR	PCHBUF
     0022 0283                      1-  380     	CLRR	STATUS
     0023 15rr                      1-  381     	SWAPR	SSAVE,W
     0024 0083                      1-  382     	MOVAR	STATUS
     0025 15rr                      1-  383     	SWAPR	WSAVE,F
     0026 15rr                      1-  384     	SWAPR	WSAVE,W
     0027                           1-  385     END_OF_INTERRUPT:
     0027 0011                      1-  386     	RETIE	
                                    1-  388     ;--------------------------------------------------------
                                    1-  389     ; code
                                    1-  390     ;--------------------------------------------------------
                                    1-  391     ; code_main	code
                                    1-  392     ;***
                                    1-  393     ;  pBlock Stats: dbName = M
                                    1-  394     ;***
                                    1-  395     ;has an exit
                                    1-  396     ;functions called:
                                    1-  397     ;   _CS1630_init_main
                                    1-  398     ;   _wake_up_init
                                    1-  399     ;   _open_WDT
                                    1-  400     ;   _get_rolling_code_0
                                    1-  401     ;   _get_rolling_code_1
                                    1-  402     ;   _get_rolling_code_2
                                    1-  403     ;   _key_init
                                    1-  404     ;   _Check_Keydown
                                    1-  405     ;   _send_ble_packet
                                    1-  406     ;   _send_ble_packet
                                    1-  407     ;   _delay_ms
                                    1-  408     ;   _send_ble_packet
                                    1-  409     ;   _send_ble_packet
                                    1-  410     ;   _wake_up_init
                                    1-  411     ;   _close_WDT
                                    1-  412     ;   _open_WDT
                                    1-  413     ;   _CS1630_init_main
                                    1-  414     ;   _wake_up_init
                                    1-  415     ;   _open_WDT
                                    1-  416     ;   _get_rolling_code_0
                                    1-  417     ;   _get_rolling_code_1
                                    1-  418     ;   _get_rolling_code_2
                                    1-  419     ;   _key_init
                                    1-  420     ;   _Check_Keydown
                                    1-  421     ;   _send_ble_packet
                                    1-  422     ;   _send_ble_packet
                                    1-  423     ;   _delay_ms
                                    1-  424     ;   _send_ble_packet
                                    1-  425     ;   _send_ble_packet
                                    1-  426     ;   _wake_up_init
                                    1-  427     ;   _close_WDT
                                    1-  428     ;   _open_WDT
                                    1-  429     ;6 compiler assigned registers:
                                    1-  430     ;   r0x100C
                                    1-  431     ;   r0x100D
                                    1-  432     ;   r0x100E
                                    1-  433     ;   r0x100F
                                    1-  434     ;   STK01
                                    1-  435     ;   STK00
                                    1-  436     ;; Starting pCode block
                                    1-  437     .segment "code"; module=main, function=_main
                                    1-  439     ;local variable name mapping:
     0000                           1-  446     _main:
                                    1-  447     ; 2 exit points
                                    1-  448     	.line	69, "main.c"; 	DISI();
     0000 0013                      1-  449     	DISI
                                    1-  450     	.line	70, "main.c"; 	CS1630_init_main();
                                    1-  451     	MCALL	_CS1630_init_main
     0001 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  452     	.line	71, "main.c"; 	wake_up_init();
                                    1-  453     	MCALL	_wake_up_init
     0002 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  454     	.line	72, "main.c"; 	open_WDT();
                                    1-  455     	MCALL	_open_WDT
     0003 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  456     	.line	73, "main.c"; 	ENI();
     0004 0004                      1-  457     	ENI
                                    1-  458     	.line	78, "main.c"; 	unsigned char old_key_status = 0;
                                    1-  459     	BANKSEL	r0x100C
     0005 rrrr                      3-  109 m1      .banksel ram_address
     0006 02rr                      1-  460     	CLRR	r0x100C
                                    1-  461     	.line	79, "main.c"; 	key_status_change = 0;
                                    1-  462     	BANKSEL	_key_status_change
     0007 rrrr                      3-  109 m1      .banksel ram_address
     0008 02rr                      1-  463     	CLRR	_key_status_change
                                    1-  464     	.line	80, "main.c"; 	extern unsigned char rolling_code_0 = get_rolling_code_0();
                                    1-  465     	MCALL	_get_rolling_code_0
     0009 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  466     	BANKSEL	_rolling_code_0
     000A rrrr                      3-  109 m1      .banksel ram_address
     000B 00rr                      1-  467     	MOVAR	_rolling_code_0
                                    1-  468     	.line	81, "main.c"; 	extern unsigned char rolling_code_1 = get_rolling_code_1();
                                    1-  469     	MCALL	_get_rolling_code_1
     000C 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  470     	BANKSEL	_rolling_code_1
     000D rrrr                      3-  109 m1      .banksel ram_address
     000E 00rr                      1-  471     	MOVAR	_rolling_code_1
                                    1-  472     	.line	82, "main.c"; 	extern unsigned char rolling_code_2 = get_rolling_code_2();
                                    1-  473     	MCALL	_get_rolling_code_2
     000F 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  474     	BANKSEL	_rolling_code_2
     0010 rrrr                      3-  109 m1      .banksel ram_address
     0011 00rr                      1-  475     	MOVAR	_rolling_code_2
     0012                           1-  476     _02050_DS_:
                                    1-  477     	.line	85, "main.c"; 	CLRWDT();
     0012 0002                      1-  478     	clrwdt
                                    1-  479     	.line	86, "main.c"; 	key_init();
                                    1-  480     	MCALL	_key_init
     0013 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  481     	.line	87, "main.c"; 	key_value = Check_Keydown();
                                    1-  482     	MCALL	_Check_Keydown
     0014 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  483     	BANKSEL	r0x100D
     0015 rrrr                      3-  109 m1      .banksel ram_address
     0016 00rr                      1-  484     	MOVAR	r0x100D
                                    1-  485     	.line	90, "main.c"; 	if(key_value != 0)
     0017 01rr                      1-  486     	MOVR	r0x100D,W
     0018 0D03                      1-  487     	BTRSC	STATUS,2
                                    1-  488     	MGOTO	_02029_DS_
     0019 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  489     	.line	92, "main.c"; 	slepp_time_count_1 = 0;
                                    1-  490     	BANKSEL	_slepp_time_count_1
     001A rrrr                      3-  109 m1      .banksel ram_address
     001B 02rr                      1-  491     	CLRR	_slepp_time_count_1
                                    1-  492     	.line	93, "main.c"; 	sleep_time_count_2 = 0;
                                    1-  493     	BANKSEL	_sleep_time_count_2
     001C rrrr                      3-  109 m1      .banksel ram_address
     001D 02rr                      1-  494     	CLRR	_sleep_time_count_2
                                    1-  495     	.line	94, "main.c"; 	Code_Value = key_value - 1;
                                    1-  496     	BANKSEL	r0x100D
     001E rrrr                      3-  109 m1      .banksel ram_address
     001F 06rr                      1-  497     	DECR	r0x100D,W
                                    1-  498     	BANKSEL	r0x100E
     0020 rrrr                      3-  109 m1      .banksel ram_address
     0021 00rr                      1-  499     	MOVAR	r0x100E
                                    1-  500     	MGOTO	_02030_DS_
     0022 3rrr                      3-   62 m1      LGOTO rom_address
     0023                           1-  501     _02029_DS_:
                                    1-  502     	.line	98, "main.c"; 	Code_Value = 0xff;
     0023 21FF                      1-  503     	MOVIA	0xff
                                    1-  504     	BANKSEL	r0x100E
     0024 rrrr                      3-  109 m1      .banksel ram_address
     0025 00rr                      1-  505     	MOVAR	r0x100E
     0026                           1-  506     _02030_DS_:
                                    1-  507     	.line	101, "main.c"; 	if(key_value != 0) // 当键值不为0
                                    1-  508     	BANKSEL	r0x100D
     0026 rrrr                      3-  109 m1      .banksel ram_address
     0027 01rr                      1-  509     	MOVR	r0x100D,W
     0028 0D03                      1-  510     	BTRSC	STATUS,2
                                    1-  511     	MGOTO	_02041_DS_
     0029 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  512     	.line	103, "main.c"; 	if(old_key_status == 0) // 上一次按键扫描结果为空时，流水号增加
                                    1-  513     	BANKSEL	r0x100C
     002A rrrr                      3-  109 m1      .banksel ram_address
     002B 01rr                      1-  514     	MOVR	r0x100C,W
     002C 0903                      1-  515     	BTRSS	STATUS,2
                                    1-  516     	MGOTO	_02038_DS_
     002D 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  517     	.line	105, "main.c"; 	Serial_Number++;
                                    1-  518     	BANKSEL	_Serial_Number
     002E rrrr                      3-  109 m1      .banksel ram_address
     002F 01rr                      1-  519     	MOVR	_Serial_Number,W
                                    1-  520     	BANKSEL	r0x100F
     0030 rrrr                      3-  109 m1      .banksel ram_address
     0031 00rr                      1-  521     	MOVAR	r0x100F
     0032 05rr                      1-  522     	INCR	r0x100F,W
                                    1-  523     	BANKSEL	_Serial_Number
     0033 rrrr                      3-  109 m1      .banksel ram_address
     0034 00rr                      1-  524     	MOVAR	_Serial_Number
                                    1-  525     	.line	106, "main.c"; 	send_ble_packet(Code_Value, 15, Serial_Number);
     0035 01rr                      1-  526     	MOVR	_Serial_Number,W
     0036 00rr                      1-  527     	MOVAR	STK01
     0037 210F                      1-  528     	MOVIA	0x0f
     0038 00rr                      1-  529     	MOVAR	STK00
                                    1-  530     	BANKSEL	r0x100E
     0039 rrrr                      3-  109 m1      .banksel ram_address
     003A 01rr                      1-  531     	MOVR	r0x100E,W
                                    1-  532     	MCALL	_send_ble_packet
     003B 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  533     	MGOTO	_02041_DS_
     003C 3rrr                      3-   62 m1      LGOTO rom_address
     003D                           1-  534     _02038_DS_:
                                    1-  535     	.line	110, "main.c"; 	if(key_value == old_key_value) // 当键值与旧键值一致
                                    1-  536     	BANKSEL	_old_key_value
     003D rrrr                      3-  109 m1      .banksel ram_address
     003E 01rr                      1-  537     	MOVR	_old_key_value,W
                                    1-  538     	BANKSEL	r0x100D
     003F rrrr                      3-  109 m1      .banksel ram_address
     0040 12rr                      1-  539     	XORAR	r0x100D,W
     0041 0903                      1-  540     	BTRSS	STATUS,2
                                    1-  541     	MGOTO	_02035_DS_
     0042 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  542     	.line	112, "main.c"; 	if(one_key_twice_dowm == 0) // 不是从中断跳出来的，流水号不增加,判定为长按
                                    1-  543     	BANKSEL	_one_key_twice_dowm
     0043 rrrr                      3-  109 m1      .banksel ram_address
     0044 01rr                      1-  544     	MOVR	_one_key_twice_dowm,W
     0045 0903                      1-  545     	BTRSS	STATUS,2
                                    1-  546     	MGOTO	_02032_DS_
     0046 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  547     	.line	114, "main.c"; 	send_ble_packet(Code_Value, 0, Serial_Number);
                                    1-  548     	BANKSEL	_Serial_Number
     0047 rrrr                      3-  109 m1      .banksel ram_address
     0048 01rr                      1-  549     	MOVR	_Serial_Number,W
     0049 00rr                      1-  550     	MOVAR	STK01
     004A 2100                      1-  551     	MOVIA	0x00
     004B 00rr                      1-  552     	MOVAR	STK00
                                    1-  553     	BANKSEL	r0x100E
     004C rrrr                      3-  109 m1      .banksel ram_address
     004D 01rr                      1-  554     	MOVR	r0x100E,W
                                    1-  555     	MCALL	_send_ble_packet
     004E 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  556     	.line	115, "main.c"; 	delay_ms(90);
     004F 215A                      1-  557     	MOVIA	0x5a
                                    1-  558     	MCALL	_delay_ms
     0050 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  559     	MGOTO	_02041_DS_
     0051 3rrr                      3-   62 m1      LGOTO rom_address
     0052                           1-  560     _02032_DS_:
                                    1-  561     	.line	119, "main.c"; 	one_key_twice_dowm = 0;
                                    1-  562     	BANKSEL	_one_key_twice_dowm
     0052 rrrr                      3-  109 m1      .banksel ram_address
     0053 02rr                      1-  563     	CLRR	_one_key_twice_dowm
                                    1-  564     	.line	120, "main.c"; 	Serial_Number++;
                                    1-  565     	BANKSEL	_Serial_Number
     0054 rrrr                      3-  109 m1      .banksel ram_address
     0055 01rr                      1-  566     	MOVR	_Serial_Number,W
                                    1-  567     	BANKSEL	r0x100F
     0056 rrrr                      3-  109 m1      .banksel ram_address
     0057 00rr                      1-  568     	MOVAR	r0x100F
     0058 05rr                      1-  569     	INCR	r0x100F,W
                                    1-  570     	BANKSEL	_Serial_Number
     0059 rrrr                      3-  109 m1      .banksel ram_address
     005A 00rr                      1-  571     	MOVAR	_Serial_Number
                                    1-  572     	.line	121, "main.c"; 	send_ble_packet(Code_Value, 15, Serial_Number);
     005B 01rr                      1-  573     	MOVR	_Serial_Number,W
     005C 00rr                      1-  574     	MOVAR	STK01
     005D 210F                      1-  575     	MOVIA	0x0f
     005E 00rr                      1-  576     	MOVAR	STK00
                                    1-  577     	BANKSEL	r0x100E
     005F rrrr                      3-  109 m1      .banksel ram_address
     0060 01rr                      1-  578     	MOVR	r0x100E,W
                                    1-  579     	MCALL	_send_ble_packet
     0061 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  580     	MGOTO	_02041_DS_
     0062 3rrr                      3-   62 m1      LGOTO rom_address
     0063                           1-  581     _02035_DS_:
                                    1-  582     	.line	126, "main.c"; 	Serial_Number++;
                                    1-  583     	BANKSEL	_Serial_Number
     0063 rrrr                      3-  109 m1      .banksel ram_address
     0064 01rr                      1-  584     	MOVR	_Serial_Number,W
                                    1-  585     	BANKSEL	r0x100F
     0065 rrrr                      3-  109 m1      .banksel ram_address
     0066 00rr                      1-  586     	MOVAR	r0x100F
     0067 05rr                      1-  587     	INCR	r0x100F,W
                                    1-  588     	BANKSEL	_Serial_Number
     0068 rrrr                      3-  109 m1      .banksel ram_address
     0069 00rr                      1-  589     	MOVAR	_Serial_Number
                                    1-  590     	.line	127, "main.c"; 	send_ble_packet(Code_Value, 15, Serial_Number);
     006A 01rr                      1-  591     	MOVR	_Serial_Number,W
     006B 00rr                      1-  592     	MOVAR	STK01
     006C 210F                      1-  593     	MOVIA	0x0f
     006D 00rr                      1-  594     	MOVAR	STK00
                                    1-  595     	BANKSEL	r0x100E
     006E rrrr                      3-  109 m1      .banksel ram_address
     006F 01rr                      1-  596     	MOVR	r0x100E,W
                                    1-  597     	MCALL	_send_ble_packet
     0070 2rrr                      3-   65 m1      LCALL rom_address
     0071                           1-  598     _02041_DS_:
                                    1-  599     	.line	131, "main.c"; 	CLRWDT();
     0071 0002                      1-  600     	clrwdt
                                    1-  601     	.line	134, "main.c"; 	if(key_value != 0)
                                    1-  602     	BANKSEL	r0x100D
     0072 rrrr                      3-  109 m1      .banksel ram_address
     0073 01rr                      1-  603     	MOVR	r0x100D,W
     0074 0D03                      1-  604     	BTRSC	STATUS,2
                                    1-  605     	MGOTO	_02043_DS_
     0075 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  606     	.line	136, "main.c"; 	old_key_status = 1;
     0076 2101                      1-  607     	MOVIA	0x01
                                    1-  608     	BANKSEL	r0x100C
     0077 rrrr                      3-  109 m1      .banksel ram_address
     0078 00rr                      1-  609     	MOVAR	r0x100C
                                    1-  610     	.line	137, "main.c"; 	old_key_value = key_value;
                                    1-  611     	BANKSEL	r0x100D
     0079 rrrr                      3-  109 m1      .banksel ram_address
     007A 01rr                      1-  612     	MOVR	r0x100D,W
                                    1-  613     	BANKSEL	_old_key_value
     007B rrrr                      3-  109 m1      .banksel ram_address
     007C 00rr                      1-  614     	MOVAR	_old_key_value
                                    1-  615     	MGOTO	_02044_DS_
     007D 3rrr                      3-   62 m1      LGOTO rom_address
     007E                           1-  616     _02043_DS_:
                                    1-  617     	.line	141, "main.c"; 	old_key_status = 0;
                                    1-  618     	BANKSEL	r0x100C
     007E rrrr                      3-  109 m1      .banksel ram_address
     007F 02rr                      1-  619     	CLRR	r0x100C
     0080                           1-  620     _02044_DS_:
                                    1-  621     	.line	145, "main.c"; 	slepp_time_count_1 ++;
                                    1-  622     	BANKSEL	_slepp_time_count_1
     0080 rrrr                      3-  109 m1      .banksel ram_address
     0081 01rr                      1-  623     	MOVR	_slepp_time_count_1,W
                                    1-  624     	BANKSEL	r0x100D
     0082 rrrr                      3-  109 m1      .banksel ram_address
     0083 00rr                      1-  625     	MOVAR	r0x100D
     0084 05rr                      1-  626     	INCR	r0x100D,W
                                    1-  627     	BANKSEL	_slepp_time_count_1
     0085 rrrr                      3-  109 m1      .banksel ram_address
     0086 00rr                      1-  628     	MOVAR	_slepp_time_count_1
                                    1-  629     	.line	146, "main.c"; 	if(slepp_time_count_1 == 255)
     0087 01rr                      1-  630     	MOVR	_slepp_time_count_1,W
     0088 24FF                      1-  631     	XORIA	0xff
     0089 0903                      1-  632     	BTRSS	STATUS,2
                                    1-  633     	MGOTO	_02046_DS_
     008A 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  634     	.line	148, "main.c"; 	slepp_time_count_1 = 0;
     008B 02rr                      1-  635     	CLRR	_slepp_time_count_1
                                    1-  636     	.line	149, "main.c"; 	sleep_time_count_2 ++;
                                    1-  637     	BANKSEL	_sleep_time_count_2
     008C rrrr                      3-  109 m1      .banksel ram_address
     008D 01rr                      1-  638     	MOVR	_sleep_time_count_2,W
                                    1-  639     	BANKSEL	r0x100D
     008E rrrr                      3-  109 m1      .banksel ram_address
     008F 00rr                      1-  640     	MOVAR	r0x100D
     0090 05rr                      1-  641     	INCR	r0x100D,W
                                    1-  642     	BANKSEL	_sleep_time_count_2
     0091 rrrr                      3-  109 m1      .banksel ram_address
     0092 00rr                      1-  643     	MOVAR	_sleep_time_count_2
     0093                           1-  644     _02046_DS_:
                                    1-  645     	.line	151, "main.c"; 	if(sleep_time_count_2 == 20)
                                    1-  646     	BANKSEL	_sleep_time_count_2
     0093 rrrr                      3-  109 m1      .banksel ram_address
     0094 01rr                      1-  647     	MOVR	_sleep_time_count_2,W
     0095 2414                      1-  648     	XORIA	0x14
     0096 0903                      1-  649     	BTRSS	STATUS,2
                                    1-  650     	MGOTO	_02050_DS_
     0097 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  651     	.line	153, "main.c"; 	sleep_time_count_2 = 0;
     0098 02rr                      1-  652     	CLRR	_sleep_time_count_2
                                    1-  653     	.line	154, "main.c"; 	wake_up_init();
                                    1-  654     	MCALL	_wake_up_init
     0099 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  655     	.line	155, "main.c"; 	close_WDT();
                                    1-  656     	MCALL	_close_WDT
     009A 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  657     	.line	156, "main.c"; 	UPDATE_REG(PORTA);
     009B 01rr                      1-  658     	MOVR	_PORTA,F
                                    1-  659     	.line	157, "main.c"; 	INTF = 0x00;
     009C 02rr                      1-  660     	CLRR	_INTF
                                    1-  661     	.line	158, "main.c"; 	SLEEP();
     009D 0001                      1-  662     	sleep
                                    1-  663     	.line	159, "main.c"; 	open_WDT();
                                    1-  664     	MCALL	_open_WDT
     009E 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  665     	MGOTO	_02050_DS_
     009F 3rrr                      3-   62 m1      LGOTO rom_address
                                    1-  666     	.line	162, "main.c"; 	}
                                    1-  667     	RETURN	
     00A0 0010                      3-   39 m1      ret
                                    1-  668     ; exit point of _main
                                    1-  670     ;***
                                    1-  671     ;  pBlock Stats: dbName = C
                                    1-  672     ;***
                                    1-  673     ;has an exit
                                    1-  674     ;functions called:
                                    1-  675     ;   _CS1630_Init
                                    1-  676     ;   _CS1630_CE_Low
                                    1-  677     ;   _CS1630_ModeSwitch
                                    1-  678     ;   _CS1630_write_byte
                                    1-  679     ;   _CS1630_write_byte
                                    1-  680     ;   _CS1630_write_byte
                                    1-  681     ;   _CS1630_write_byte
                                    1-  682     ;   _delay_ms
                                    1-  683     ;   _CS1630_Init
                                    1-  684     ;   _CS1630_CE_Low
                                    1-  685     ;   _CS1630_ModeSwitch
                                    1-  686     ;   _CS1630_write_byte
                                    1-  687     ;   _CS1630_write_byte
                                    1-  688     ;   _CS1630_write_byte
                                    1-  689     ;   _CS1630_write_byte
                                    1-  690     ;   _delay_ms
                                    1-  691     ;1 compiler assigned register :
                                    1-  692     ;   STK00
                                    1-  693     ;; Starting pCode block
                                    1-  694     .segment "code"; module=main, function=_CS1630_init_main
     0000                           1-  696     _CS1630_init_main:
                                    1-  697     ; 2 exit points
                                    1-  698     	.line	55, "main.c"; 	CS1630_Init(); // 初始化CS1630模块
                                    1-  699     	MCALL	_CS1630_Init
     0000 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  700     	.line	56, "main.c"; 	CS1630_CE_Low(); // 设置CE引脚为低电平，准备发送数据
                                    1-  701     	MCALL	_CS1630_CE_Low
     0001 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  702     	.line	57, "main.c"; 	CS1630_ModeSwitch(Rf_PTX_Mode); // 切换到发送模式
     0002 2101                      1-  703     	MOVIA	0x01
                                    1-  704     	MCALL	_CS1630_ModeSwitch
     0003 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  705     	.line	60, "main.c"; 	CS1630_write_byte(CS1630_BANK0_FEATURE, 0x04);
     0004 2104                      1-  706     	MOVIA	0x04
     0005 00rr                      1-  707     	MOVAR	STK00
     0006 211D                      1-  708     	MOVIA	0x1d
                                    1-  709     	MCALL	_CS1630_write_byte
     0007 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  710     	.line	61, "main.c"; 	CS1630_write_byte(CS1630_BANK0_CONFIG, 0x0f);
     0008 210F                      1-  711     	MOVIA	0x0f
     0009 00rr                      1-  712     	MOVAR	STK00
     000A 2100                      1-  713     	MOVIA	0x00
                                    1-  714     	MCALL	_CS1630_write_byte
     000B 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  715     	.line	62, "main.c"; 	CS1630_write_byte(CS1630_BANK0_SETUP_VALUE, 0x04); // 配置值
     000C 2104                      1-  716     	MOVIA	0x04
     000D 00rr                      1-  717     	MOVAR	STK00
     000E 211E                      1-  718     	MOVIA	0x1e
                                    1-  719     	MCALL	_CS1630_write_byte
     000F 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  720     	.line	63, "main.c"; 	CS1630_write_byte(CS1630_BANK0_CONFIG, 0x0d);
     0010 210D                      1-  721     	MOVIA	0x0d
     0011 00rr                      1-  722     	MOVAR	STK00
     0012 2100                      1-  723     	MOVIA	0x00
                                    1-  724     	MCALL	_CS1630_write_byte
     0013 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  725     	.line	64, "main.c"; 	delay_ms(2);
     0014 2102                      1-  726     	MOVIA	0x02
                                    1-  727     	MCALL	_delay_ms
     0015 2rrr                      3-   65 m1      LCALL rom_address
                                    1-  728     	.line	65, "main.c"; 	}
                                    1-  729     	RETURN	
     0016 0010                      3-   39 m1      ret
                                    1-  730     ; exit point of _CS1630_init_main
                                    1-  732     ;***
                                    1-  733     ;  pBlock Stats: dbName = C
                                    1-  734     ;***
                                    1-  735     ;has an exit
                                    1-  736     ;; Starting pCode block
                                    1-  737     .segment "code"; module=main, function=_close_WDT
     0000                           1-  739     _close_WDT:
                                    1-  740     ; 2 exit points
                                    1-  741     	.line	49, "main.c"; 	PCON &= ~C_WDT_En;
     0000 1Frr                      1-  742     	BCR	_PCON,7
                                    1-  743     	.line	50, "main.c"; 	PCON &= ~C_LVR_En;
     0001 1Drr                      1-  744     	BCR	_PCON,3
                                    1-  745     	.line	51, "main.c"; 	}
                                    1-  746     	RETURN	
     0002 0010                      3-   39 m1      ret
                                    1-  747     ; exit point of _close_WDT
                                    1-  749     ;***
                                    1-  750     ;  pBlock Stats: dbName = C
                                    1-  751     ;***
                                    1-  752     ;has an exit
                                    1-  753     ;; Starting pCode block
                                    1-  754     .segment "code"; module=main, function=_open_WDT
     0000                           1-  756     _open_WDT:
                                    1-  757     ; 2 exit points
                                    1-  758     	.line	43, "main.c"; 	PCON |= C_WDT_En;	//使能看门狗
     0000 1Brr                      1-  759     	BSR	_PCON,7
                                    1-  760     	.line	44, "main.c"; 	PCON |= C_LVR_En;	//低压复位使能
     0001 19rr                      1-  761     	BSR	_PCON,3
                                    1-  762     	.line	45, "main.c"; 	}
                                    1-  763     	RETURN	
     0002 0010                      3-   39 m1      ret
                                    1-  764     ; exit point of _open_WDT
                                    1-  766     ;***
                                    1-  767     ;  pBlock Stats: dbName = C
                                    1-  768     ;***
                                    1-  769     ;has an exit
                                    1-  770     ;; Starting pCode block
                                    1-  771     .segment "code"; module=main, function=_wake_up_init
     0000                           1-  773     _wake_up_init:
                                    1-  774     ; 2 exit points
                                    1-  775     	.line	32, "main.c"; 	AWUCON = 0xfc;
     0000 21FC                      1-  776     	MOVIA	0xfc
     0001 00rr                      1-  777     	MOVAR	_AWUCON
                                    1-  778     	.line	33, "main.c"; 	BWUCON = 0x00;
     0002 02rr                      1-  779     	CLRR	_BWUCON
                                    1-  780     	.line	34, "main.c"; 	IOSTA = C_PA2_Input | C_PA3_Input | C_PA4_Input | C_PA5_Input | C_PA6_Input | C_PA7_Input;  // 配置PA2、3、4、5、6、7为输入
     0003 21FC                      1-  781     	MOVIA	0xfc
     0004 000r                      1-  782     	IOST	_IOSTA
                                    1-  783     	.line	35, "main.c"; 	APHCON = 0b00100011; // 设置2、3、4、6、7上拉
     0005 2123                      1-  784     	MOVIA	0x23
     0006 000r                      1-  785     	IOST	_APHCON
                                    1-  786     	.line	37, "main.c"; 	INTE = C_INT_PABKey;
     0007 2102                      1-  787     	MOVIA	0x02
     0008 00rr                      1-  788     	MOVAR	_INTE
                                    1-  789     	.line	38, "main.c"; 	INTF = 0x00;
     0009 02rr                      1-  790     	CLRR	_INTF
                                    1-  791     	.line	39, "main.c"; 	}
                                    1-  792     	RETURN	
     000A 0010                      3-   39 m1      ret
                                    1-  793     ; exit point of _wake_up_init
                                    1-  796     ;	code size estimation:
                                    1-  797     ;	  185+   50 =   235 instructions (  570 byte)
                                    1-  799     	end

SYMBOL TABLE            TYPE     VALUE
__pin_count__           Constant 0000000E
__processor__           Constant 00800544
C                       Constant 00000000
DC                      Constant 00000001
ENABLE_RAM_BANK         Constant 00000001
F                       Constant 00000001
FSR                     Constant 00000004
INDF                    Constant 00000000
PCHBUF                  Constant 0000000A
PCL                     Constant 00000002
STATUS                  Constant 00000003
USEFGOTO                Constant 00000000
W                       Constant 00000000
Z                       Constant 00000002


SOURCE FILE TABLE
001 OBJ/main.s
002 ny8a054e.inc
003 common.inc
004 main.c

PROCESSOR    = NY8A054E (8 bits)
PROGRAM ROM  = 0x00000000 - 0x000007FF
DATA ROM     = 0x00000000 - 0x000007FF
RESERVED MEM = 0x00000800 - 0x00000810
SRAM / SFR   = 0x00000000 - 0x00000000
